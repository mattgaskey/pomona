<?php

/**
 * @file
 * Module file for inset_injector_module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * @defgroup inset_injector Example: Page
 * @ingroup examples
 * @{
 * This example demonstrates how a module can display a page at a given URL.
 *
 * It's important to understand how the menu system works in order to
 * implement your own pages. See the Menu Example module for some insight.
 *
 * @see menu_example
 */

/**
 * Implements hook_help().
 *
 * Through hook_help(), a module can make documentation available to the user
 * for the module as a whole or for specific routes. Where the help appears
 * depends on the $route_name specified.
 *
 * Help text will be displayed in the region designated for help text. Typically
 * this is the 'Help' region which can be found at admin/structure/block.
 *
 * The help text in the first example below, will appear on the simple page at
 * examples/page-example/simple.
 *
 * The second example text will be available on the admin help page (admin/help)
 * in the list of help topics using the name of the module. To specify help in
 * the admin section combine the special route name of 'help.page' with the
 * module's machine name, as in 'help.page.inset_injector' below.
 *
 * See the Help text standard page for the proposed format of help texts.
 *
 * @see https://www.drupal.org/documentation/help-text-standards
 *
 * @see hook_help()
 */
function inset_injector_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'inset_injector.simple':
      // Help text for the simple page registered for this path.
      return t('This is help text for the simple page.');

    case 'help.page.inset_injector':
      // Help text for the admin section, using the module name in the path.
      $str = <<<EOT
<h3>About</h3>
<p>This plugin provides a mechanism for embedding Paragraph entities as 
<code>asides</code> into long passages of text. This is achived in the
templates with a twig filter because this seemed the most Drupal-like
method of organizing the asides without relying on interpreting tokens. 
Tokens in WYSIWYG fields are handy but pollute the content space; this
also makes use of fields and processes that were originally developed
for the D7 version of this site.</p>
<h4>Use:</h4>
<p>In the twig template, isolate the long text field and run the "inset"
filter through it. Pass the filter the field that contains the insets
that are required. For example:</p>
<pre>
&lt;div{{ content_attributes }}&gt;
  {{ content.body|inject(content.field_insets) }}
  {{ content.without('body', 'field_insets') }}
&lt;/div&gt;
</pre>
EOT;
      return $str;
  }
}

/**
 * @} End of "defgroup inset_injector".
 */